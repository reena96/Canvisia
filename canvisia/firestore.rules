rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user has permission
    function hasPermission(projectId, role) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid)) &&
        get(/databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid)).data.role == role;
    }

    function hasAnyPermission(projectId) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid));
    }

    // Check if project is shared via link (has publicAccessLevel set)
    function isProjectShared(projectId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.keys().hasAny(['publicAccessLevel']);
    }

    // Check if project allows editing via link
    function canLinkUsersEdit(projectId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.get('publicAccessLevel', null) == 'editor';
    }

    // Combined check: explicit permission OR link sharing enabled
    function canAccessProject(projectId) {
      return hasAnyPermission(projectId) || isProjectShared(projectId);
    }

    function canEditProject(projectId) {
      // Allow editing if user has explicit permission OR project allows link editing
      let permissionPath = /databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid);
      return request.auth != null && (
        // Has explicit owner/editor permission
        (exists(permissionPath) &&
         (get(permissionPath).data.role == 'owner' || get(permissionPath).data.role == 'editor'))
        ||
        // OR project allows editing via public link
        canLinkUsersEdit(projectId)
      );
    }

    // Projects: read if has permission or shared via link, write if owner
    match /projects/{projectId} {
      allow read: if canAccessProject(projectId);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if hasPermission(projectId, 'owner');
      allow delete: if hasPermission(projectId, 'owner');

      // Canvases: inherit project-level permissions
      match /canvases/{canvasId} {
        allow get, list: if canAccessProject(projectId);
        allow write: if canEditProject(projectId);

        // Objects: inherit project permissions
        match /objects/{objectId} {
          allow get, list: if canAccessProject(projectId);
          // TEMPORARY: Allow all authenticated users to write for debugging
          allow write: if request.auth != null;
        }

        // Annotations: users with access can read, editors can create, users can delete their own
        match /annotations/{annotationId} {
          allow get, list: if canAccessProject(projectId);
          allow create: if request.auth != null && canEditProject(projectId);
          allow update, delete: if request.auth != null &&
                                 (resource.data.userId == request.auth.uid || hasPermission(projectId, 'owner'));
        }

        // Chat messages
        match /chats/{tabId}/messages/{messageId} {
          allow get, list: if canAccessProject(projectId);
          allow create: if request.auth != null && canAccessProject(projectId);
          allow update: if request.auth != null && canAccessProject(projectId)
                        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
          allow delete: if false;
        }

        // Chat tabs
        match /chatTabs/{tabId} {
          allow get, list: if canAccessProject(projectId);
          allow create: if request.auth != null && canAccessProject(projectId);
          allow update: if request.auth != null && canAccessProject(projectId);
          allow delete: if false;
        }

        // Presence tracking
        match /presence/{userId} {
          allow get, list: if canAccessProject(projectId);
          allow write: if request.auth != null && canAccessProject(projectId);
        }

        // Undo history
        match /undoHistory/{undoId} {
          allow get, list: if canAccessProject(projectId);
          allow write: if request.auth != null && canEditProject(projectId);
        }
      }
    }

    // Permissions: owner can manage, users can read their own
    match /permissions/{permissionId} {
      allow read: if request.auth != null && permissionId.matches('.*_' + request.auth.uid);
      // Allow listing permissions collection (filtered by read rules)
      allow list: if request.auth != null;
      // Allow creating permission if:
      // 1. User is setting themselves as owner, OR
      // 2. User is the project owner inviting someone else, OR
      // 3. User is creating permission for themselves via public link
      allow create: if request.auth != null && (
        (request.resource.data.userId == request.auth.uid && request.resource.data.role == 'owner')
        ||
        hasPermission(request.resource.data.projectId, 'owner')
        ||
        (request.resource.data.userId == request.auth.uid &&
         isProjectShared(request.resource.data.projectId) &&
         (request.resource.data.role == 'viewer' || request.resource.data.role == 'editor'))
      );
      // Allow update/delete if user is owner of the project
      allow update, delete: if request.auth != null &&
        hasPermission(resource.data.projectId, 'owner');
    }


    // Legacy canvases collection (read-only for backward compatibility)
    match /canvases/{canvasId} {
      allow read: if request.auth != null;
      allow write: if false;  // Prevent new writes to old structure

      match /objects/{objectId} {
        allow read: if request.auth != null;
        allow write: if false;
      }

      // Annotations (legacy path - for backward compatibility)
      match /annotations/{annotationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // Chat messages (keep for backward compatibility)
      match /chats/{tabId}/messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        allow delete: if false;
      }

      // Chat tabs (keep for backward compatibility)
      match /chatTabs/{tabId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if false;
      }
    }
  }
}
