rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Check if user is the project owner (UI-only, for delete/update operations)
    function isOwner(projectId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid;
    }

    // Projects: anyone authenticated can read, only owner can update/delete
    match /projects/{projectId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isOwner(projectId);

      // Canvases: anyone authenticated can read and write
      match /canvases/{canvasId} {
        allow read, write: if request.auth != null;

        // Objects: anyone authenticated can read and write
        match /objects/{objectId} {
          allow read, write: if request.auth != null;
        }

        // Annotations: anyone authenticated can read and write
        match /annotations/{annotationId} {
          allow read, write: if request.auth != null;
        }

        // Chat messages: anyone authenticated can read and create
        match /chats/{tabId}/messages/{messageId} {
          allow read, create: if request.auth != null;
          allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
          allow delete: if false;
        }

        // Chat tabs: anyone authenticated can read and write
        match /chatTabs/{tabId} {
          allow read, write: if request.auth != null;
        }

        // Presence tracking: anyone authenticated can read and write
        match /presence/{userId} {
          allow read, write: if request.auth != null;
        }

        // Undo history: anyone authenticated can read and write
        match /undoHistory/{undoId} {
          allow read, write: if request.auth != null;
        }
      }
    }


    // Legacy canvases collection (read-only for backward compatibility)
    match /canvases/{canvasId} {
      allow read: if request.auth != null;
      allow write: if false;  // Prevent new writes to old structure

      match /objects/{objectId} {
        allow read: if request.auth != null;
        allow write: if false;
      }

      // Annotations (legacy path - for backward compatibility)
      match /annotations/{annotationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // Chat messages (keep for backward compatibility)
      match /chats/{tabId}/messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        allow delete: if false;
      }

      // Chat tabs (keep for backward compatibility)
      match /chatTabs/{tabId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if false;
      }
    }
  }
}
