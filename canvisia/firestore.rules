rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Check if user has owner or editor permission (only two roles now)
    function hasPermission(projectId) {
      let permissionPath = /databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid);
      return request.auth != null &&
        exists(permissionPath) &&
        (get(permissionPath).data.role == 'owner' || get(permissionPath).data.role == 'editor');
    }

    // Check if user is the project owner (for owner-only operations)
    function isOwner(projectId) {
      let permissionPath = /databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid);
      return request.auth != null &&
        exists(permissionPath) &&
        get(permissionPath).data.role == 'owner';
    }

    // Check if project has link sharing enabled
    function isProjectShared(projectId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/projects/$(projectId)) &&
             get(/databases/$(database)/documents/projects/$(projectId)).data.get('publicAccessLevel', null) == 'editor';
    }

    // User can access if they have permission OR project is shared via link
    function canAccess(projectId) {
      return hasPermission(projectId) || isProjectShared(projectId);
    }

    // Projects: read if has permission, write if owner only
    match /projects/{projectId} {
      allow read: if canAccess(projectId);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(projectId);
      allow delete: if isOwner(projectId);

      // Canvases: all owners/editors can read and write
      match /canvases/{canvasId} {
        allow read, write: if canAccess(projectId);

        // Objects: all owners/editors can read and write
        match /objects/{objectId} {
          allow read, write: if canAccess(projectId);
        }

        // Annotations: all owners/editors can read and write
        match /annotations/{annotationId} {
          allow read, write: if canAccess(projectId);
        }

        // Chat messages: all owners/editors can read and create
        match /chats/{tabId}/messages/{messageId} {
          allow get, list: if canAccess(projectId);
          allow create: if canAccess(projectId);
          allow update: if canAccess(projectId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
          allow delete: if false;
        }

        // Chat tabs: all owners/editors can read and write
        match /chatTabs/{tabId} {
          allow read, write: if canAccess(projectId);
        }

        // Presence tracking: all owners/editors can read and write
        match /presence/{userId} {
          allow read, write: if canAccess(projectId);
        }

        // Undo history: all owners/editors can read and write
        match /undoHistory/{undoId} {
          allow read, write: if canAccess(projectId);
        }
      }
    }

    // Permissions: owner can manage, users can read their own
    match /permissions/{permissionId} {
      allow read: if request.auth != null && permissionId.matches('.*_' + request.auth.uid);
      // Allow listing permissions collection (filtered by read rules)
      allow list: if request.auth != null;
      // Allow creating permission if:
      // 1. User is setting themselves as owner when creating a project, OR
      // 2. User is the project owner inviting someone else, OR
      // 3. User is creating permission for themselves via shared link (editor only)
      allow create: if request.auth != null && (
        (request.resource.data.userId == request.auth.uid && request.resource.data.role == 'owner')
        ||
        isOwner(request.resource.data.projectId)
        ||
        (request.resource.data.userId == request.auth.uid &&
         isProjectShared(request.resource.data.projectId) &&
         request.resource.data.role == 'editor')
      );
      // Allow update/delete if user is owner of the project
      allow update, delete: if request.auth != null && isOwner(resource.data.projectId);
    }


    // Legacy canvases collection (read-only for backward compatibility)
    match /canvases/{canvasId} {
      allow read: if request.auth != null;
      allow write: if false;  // Prevent new writes to old structure

      match /objects/{objectId} {
        allow read: if request.auth != null;
        allow write: if false;
      }

      // Annotations (legacy path - for backward compatibility)
      match /annotations/{annotationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }

      // Chat messages (keep for backward compatibility)
      match /chats/{tabId}/messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        allow delete: if false;
      }

      // Chat tabs (keep for backward compatibility)
      match /chatTabs/{tabId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if false;
      }
    }
  }
}
