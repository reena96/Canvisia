rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user has permission
    function hasPermission(projectId, role) {
      let permDoc = get(/databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid));
      return permDoc != null && permDoc.data.role == role;
    }

    function hasAnyPermission(projectId) {
      return exists(/databases/$(database)/documents/permissions/$(projectId + '_' + request.auth.uid));
    }

    // Projects: read if has permission, write if owner
    match /projects/{projectId} {
      allow read: if hasAnyPermission(projectId);
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if hasPermission(projectId, 'owner');

      // Canvases: inherit project permissions
      match /canvases/{canvasId} {
        allow read: if hasAnyPermission(projectId);
        allow write: if hasPermission(projectId, 'owner') || hasPermission(projectId, 'editor');

        // Objects: inherit canvas permissions
        match /objects/{objectId} {
          allow read: if hasAnyPermission(projectId);
          allow write: if hasPermission(projectId, 'owner') || hasPermission(projectId, 'editor');
        }
      }
    }

    // Permissions: owner can manage, users can read their own
    match /permissions/{permissionId} {
      allow read: if request.auth != null && permissionId.matches('.*_' + request.auth.uid);
      allow create, update, delete: if request.auth != null &&
        hasPermission(resource.data.projectId, 'owner');
    }

    // Legacy canvases collection (read-only for backward compatibility)
    match /canvases/{canvasId} {
      allow read: if request.auth != null;
      allow write: if false;  // Prevent new writes to old structure

      match /objects/{objectId} {
        allow read: if request.auth != null;
        allow write: if false;
      }

      // Chat messages (keep for backward compatibility)
      match /chats/{tabId}/messages/{messageId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        allow delete: if false;
      }

      // Chat tabs (keep for backward compatibility)
      match /chatTabs/{tabId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if false;
      }
    }
  }
}
